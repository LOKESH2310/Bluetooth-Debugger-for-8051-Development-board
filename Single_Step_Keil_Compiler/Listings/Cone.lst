C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CONE
OBJECT MODULE PLACED IN .\Objects\Cone.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Cone.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Cone
                    -.lst) TABS(2) OBJECT(.\Objects\Cone.obj)

line level    source

   1          #include <REG51.H>
   2          #include <stdio.h>
   3          
   4          
   5          void uart_init();
   6          void jump_to_user_code();
   7          void trans_string(const char *str);
   8          void jump(void);
   9          void hex(void);
  10          
  11          int c;
  12          char z;
  13          unsigned char pc_low;
  14          unsigned char pc_high;
  15          char accbuffer[10];
  16          char bbuffer[10];
  17          char pswbuffer[10];
  18          char buffer[10];
  19          unsigned char *sp_addr;    
  20          unsigned int pc_value;
  21          unsigned int lastpc;
  22          unsigned int flagy;
  23          unsigned int FL;
  24          unsigned int dpl;
  25          unsigned int dph;
  26          unsigned char sp_val, acc_value, b_value, psw_value;
  27          unsigned int dptr_value;
  28          unsigned char r_values[8];
  29          unsigned char exit;
  30          
  31          int i;
  32          int j;
  33          
  34          unsigned char hex_string[5]; // Buffer for the 4-digit hex string
  35          unsigned int address = 0;
  36          int digit;
  37          unsigned int user_address;
  38          void (*user_code)(void);
  39          
  40          char cmd;
  41          // UART Initialization
  42          void uart_init(void) 
  43          {
  44   1          TMOD |= 0x20;               // Set Timer 1 in Mode 2 (8-bit auto-reload)
  45   1          TH1 = 0xFD;                 // Set reload value for 9600 baud rate (11.0592 MHz clock)
  46   1          SCON = 0x50;                // 8-bit UART mode, REN enabled (Receive Enable)
  47   1          TR1 = 1;                    // Start Timer 1
  48   1          TI = 1;                     // Set TI to indicate transmitter is ready
  49   1      }
  50          
  51          
  52          void trans (char c)
  53          {
  54   1          SBUF = c;
C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 2   

  55   1          while (!TI);
  56   1          TI = 0;
  57   1          
  58   1      }
  59          
  60          char typeit (void){
  61   1          while (!RI);
  62   1          RI = 0;
  63   1          return SBUF;
  64   1      }
  65            
  66          // Function to get a 4-digit hex address from the user
  67          unsigned int get_user_address()
  68          {
  69   1          unsigned char bp;
  70   1          flagy = 1;
  71   1          // Prompt the user to enter a 4-digit hex address
  72   1          
  73   1          
  74   1        trans_string("\n\n\r Enter the address: ");
  75   1          
  76   1      
  77   1          // Read 4 characters from the user
  78   1          for (i = 0; i < 4; i++) {
  79   2              bp = typeit();
  80   2              if (bp == '\b'){
  81   3                trans('\b');   // Send Backspace to move cursor back
  82   3                trans(' ');    // Send Space to overwrite the character
  83   3                trans('\b');
  84   3                i=i-2;
  85   3              } else {
  86   3              hex_string[i] = bp; // Get each hex character
  87   3              trans(hex_string[i]);     // Echo back the character
  88   3              }
  89   2          }
  90   1          hex_string[4] = '\0'; // Null-terminate the string
  91   1      
  92   1          // Convert the hex string to an integer value
  93   1          for (i = 0; i < 4; i++) {
  94   2              if (hex_string[i] >= '0' && hex_string[i] <= '9') {
  95   3                  digit = hex_string[i] - '0';
  96   3              } else if (hex_string[i] >= 'A' && hex_string[i] <= 'F') {
  97   3                  digit = hex_string[i] - 'A' + 10;
  98   3              } else if (hex_string[i] >= 'a' && hex_string[i] <= 'f') {
  99   3                  digit = hex_string[i] - 'a' + 10;
 100   3              } else {
 101   3                  // Invalid input, default to 0
 102   3                  digit = 0;
 103   3              }
 104   2              address = (address << 4) | digit; // Shift and add the digit
 105   2          }
 106   1          return address;
 107   1      }
 108          
 109          void jump_to_user_code() {
 110   1          if (!(P3 & 0x08)){
 111   2          user_address = get_user_address();
 112   2          user_code= (void (*)(void))user_address; 
 113   2        trans_string("\r\n\n Single-Step execution started: Press 'E' to exit!\r\n");
 114   2        trans_string("\r\n -----------------------------------------------\r\n");
 115   2          IT1 = 0;
 116   2          EX1 = 1;                 
C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 3   

 117   2          EA = 1;         
 118   2          user_code();  
 119   2          } else {
 120   2            trans_string("P3.3 (INT1) is not connected to low!");
 121   2          }
 122   1      }
 123          
 124          
 125          
 126          void int1_handler() interrupt 2 {
 127   1        
 128   1          for (i = 0; i < 100; i++){
 129   2            for (i = 0; i < 100; i++){}
 130   2          }
 131   1          TI = 1;
 132   1          
 133   1          
 134   1          // Get Stack Pointer (SP)
 135   1          sp_val = SP;
 136   1          sp_addr = (unsigned char *)sp_val;
 137   1          for (i = 7; i >= 0; i--) {
 138   2              r_values[i] = *((unsigned char *)sp_addr);
 139   2              sp_addr--;// General-purpose registers R0-R7
 140   2          }
 141   1          
 142   1          psw_value = *((unsigned char *)sp_addr);   // Program Status Word
 143   1          sp_addr--;
 144   1          
 145   1          dpl = *((unsigned char *)sp_addr);
 146   1          sp_addr--;
 147   1          dph = *((unsigned char *)sp_addr);
 148   1          sp_addr--;
 149   1          dptr_value = (dpl | (dph << 8)); // Data Pointer
 150   1          
 151   1          b_value = *((unsigned char *)sp_addr);
 152   1          sp_addr--;
 153   1          
 154   1          acc_value = *((unsigned char *)sp_addr);
 155   1          sp_addr--;
 156   1          
 157   1          // Get Program Counter (PC)
 158   1          pc_high = *((unsigned char *)sp_addr);
 159   1          sp_addr--;
 160   1          pc_low = *((unsigned char *)sp_addr);
 161   1          sp_addr--;
 162   1          
 163   1          if (flagy){
 164   2            pc_value = user_address;
 165   2            flagy = 0;
 166   2          } else {
 167   2            pc_value = lastpc;
 168   2          }
 169   1          lastpc = (pc_high << 8) | pc_low;
 170   1          //pc_value = (pc_high << 8) | pc_low;
 171   1          
 172   1          sp_val = (unsigned char)sp_addr;
 173   1          
 174   1          if (FL){
 175   2          
 176   2          trans_string("\n\r ACC B PSW DPTR R0 R1 R2 R3 R4 R5 R6 R7 SP PC\n\r ");
 177   2          
 178   2          sprintf(accbuffer, "%04X ", acc_value);
C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 4   

 179   2          for (i = 0; i < 2; i++) trans(accbuffer[i]);
 180   2          trans(' ');
 181   2          sprintf(bbuffer, "%04X ", b_value);
 182   2          for (i = 0; i < 2; i++) trans(bbuffer[i]);
 183   2          trans(' ');
 184   2          sprintf(pswbuffer, "%04X ", psw_value);
 185   2          for (i = 2; i < 4; i++) trans(pswbuffer[i]);
 186   2          trans(' ');
 187   2          sprintf(buffer, " %04X ", dptr_value);
 188   2          for (i = 0; buffer[i] != '\0'; i++) trans(buffer[i]);
 189   2      
 190   2          // Print R0-R7
 191   2          for (i = 0; i < 8; i++) {
 192   3              sprintf(buffer, "%02X ", r_values[i]);
 193   3              for (j = 0; j < 2 ; j++) trans(buffer[j]);
 194   3              trans(' ');
 195   3          }
 196   2      
 197   2          // Print SP
 198   2          sprintf(buffer, "%02X ", sp_val);
 199   2          for (i = 0; i < 2; i++) trans(buffer[i]);
 200   2          
 201   2      
 202   2          // Print PC
 203   2          sprintf(buffer, " %04X", pc_value);
 204   2          for (i = 0; buffer[i] != '\0'; i++) trans(buffer[i]);
 205   2      
 206   2          
 207   2          while (1){
 208   3            exit = typeit();
 209   3            if (exit == 'E'){
 210   4            trans('\n');
 211   4            trans('\r');
 212   4            EX1 = 0;                 
 213   4            EA = 0;
 214   4            trans_string(" -----------------------------------------------\r\n");
 215   4            //exity();
 216   4            break;
 217   4            } else if ( exit == '\r'){
 218   4                trans('\n');
 219   4                trans('\n');
 220   4                trans('\r');
 221   4                break;
 222   4              }
 223   3          }
 224   2          
 225   2        } else if (lastpc == user_address){
 226   2            FL = 1;
 227   2        }
 228   1          TI = 1;
 229   1      }
 230          
 231          void trans_string(const char *str)
 232          {
 233   1          i = 0;
 234   1          while (str[i] != '\0') // Loop until the null terminator is encountered
 235   1          {
 236   2              trans(str[i]);     // Call trans() for each character
 237   2              i++;
 238   2          }
 239   1      }
 240          
C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 5   

 241          void help(void){
 242   1        
 243   1         trans_string("\r\n\n ====================================\r\n\n");
 244   1          trans_string("         AT89C51RC2 Debugger Monitor\r\n\n");
 245   1          trans_string(" ====================================\r\n\n");
 246   1          trans_string(" Available Commands:\r\n\n");
 247   1          trans_string(" M - Memory Editor\r\n\n");
 248   1          trans_string(" S - Single Step Execution\r\n\n");
 249   1          trans_string(" J - Jump to User code\r\n\n");
 250   1          trans_string(" H - Display This Help Menu\r\n\n");
 251   1          trans_string(" ====================================\r\n\n");
 252   1      
 253   1      }
 254          
 255          void jump(void){
 256   1          user_address = get_user_address();
 257   1          user_code= (void (*)(void))user_address; 
 258   1          user_code();
 259   1      }
 260          
 261          void hex(void){
 262   1        void (*hexdump)(void) = (void (*)(void))0x2000;
 263   1        hexdump();
 264   1      }
 265          
 266          
 267          void main() {
 268   1          uart_init();
 269   1          while(1){
 270   2          help();
 271   2          trans_string("\r\n Enter the Command: ");
 272   2          cmd = typeit();
 273   2          trans(cmd);
 274   2          trans_string("\033[2J\033[H");
 275   2          switch (cmd) {
 276   3              case 'M': case 'm':
 277   3                  hex();
 278   3                  break;
 279   3              case 'S': case 's':
 280   3                  jump_to_user_code();
 281   3                  break;
 282   3              case 'H': case 'h':
 283   3                  break;
 284   3              case 'J': case 'j':
 285   3                  jump();
 286   3                  break;
 287   3              default:
 288   3                  trans_string("\r\n Invalid Command !\r\n");
 289   3                  break;
 290   3          }
 291   2        }
 292   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1426    ----
   CONSTANT SIZE    =    609    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     94       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.7.0   CONE                                                              12/08/2024 17:57:17 PAGE 6   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
